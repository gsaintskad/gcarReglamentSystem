# docker-compose.yml
version: '3.8' # Use a recent version for latest features
networks:
  m_net: # Defines a custom bridge network named 'm_net'
    driver: bridge
services:
  nginx:
    image: nginx:latest
    ports:
      # Map host port to Nginx's HTTP port, taken from .env
      - "${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}"
      # Map host port to Nginx's internal DB proxy port, taken from .env
      - "5434:${NGINX_DB_PROXY_PORT}" # Host port 5434 for Nginx's DB proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - app
      - db
    restart: always
    environment:
      # Pass these environment variables directly to the Nginx container
      NGINX_HTTP_PORT: ${NGINX_HTTP_PORT}
      NGINX_DB_PROXY_PORT: ${NGINX_DB_PROXY_PORT}
      FRONTEND_INTERNAL_PORT: ${FRONTEND_INTERNAL_PORT}
      BACKEND_INTERNAL_PORT: ${BACKEND_INTERNAL_PORT}
  db:
    image: postgres:14-alpine # Or your preferred database image (mysql, mongo, etc.)
    restart: always
    environment:
      POSTGRES_USER: ${GCAR_PG_USER}
      POSTGRES_PASSWORD: ${GCAR_PG_PASSWORD}
      POSTGRES_DB: ${GCAR_PG_DB}
    volumes:
      - db_data:/var/lib/postgresql/data 
    networks:
      - m_net      
    ports:
      - "5433:5432" # 
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${GCAR_PG_USER} -d ${GCAR_PG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app: # Your application service (e.g., Node.js with Knex)
    build: ./backend # Or image: your_app_image
    restart: always
    ports:
      - "${PORT}:${PORT}" # Maps host_port:container_port
    networks:
      - m_net    
      # Pass the entire backend/.env file to the app container
    env_file:
      - ./backend/.env # Pointing to the .env file within the backend directory
    depends_on:
      db:
        condition: service_healthy # Ensure app starts only after db is healthy
  frontend:
    build: ./frontend
    restart: always
    depends_on:
      - app
    networks:
      - m_net
  
volumes:
  db_data:
