
worker_processes auto;

events {
    worker_connections 1024;
}

# Stream module for TCP/UDP proxying (for database connections)
stream {
    # Define an upstream server group for your PostgreSQL database
    # Use the Docker service name 'db' and its internal port '5432'
    upstream postgres_gcar_backend {
        server db:5432; # DB internal port remains 5432
    }

    # Listen on the NGINX_DB_PROXY_PORT inside the Nginx container
    server {
        listen 5433; # Nginx container listens on this port
        proxy_pass postgres_gcar_backend;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
    }
}

# HTTP module for web traffic routing
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Define upstream servers for your Docker Compose services
    upstream frontend_service {
        server frontend:8080;
    }

    upstream backend_service {
        server app:4000;
    }

    server {
        listen 80; # Nginx listens on this port for incoming HTTP requests
        server_name localhost; # Or your domain name (e.g., your-app.com)

        # Root location for the frontend application
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API location for the backend application
        location /api/ {
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
